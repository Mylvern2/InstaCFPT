@page "/profile"
@* 
    Théo Neusser
    IDA-P4C
    Atelier Prog
    10.03.2024
 *@
<PageTitle>Profile</PageTitle>

<h2> You are connected as <span class="text-success">@User.Name</span></h2>

@if (lstPublications == null)
{
            <p><em>Loading...</em></p>
}
else
{
            <div class="container-fluid">
                <div class="row flex-row justify-content-between">
            @foreach (var pub in lstPublications)
            {
                    if (pub.AuthorName != User.Name)
                    {
                        continue;
                    }

                                <div class="card col-3 d-flex center customer-card">
                                    <img class="card-img-top" src="/images/@pub.Image" alt="@pub.Image">
                                    <div class="card-body d-flex flex-column justify-content-between">
                                        <h2 class="card-title"><a href="/publication?id=@pub.Id" class="text-decoration-none text-reset">@pub.Title</a></h2>
                                        <h3 class="card-title text-muted"> @pub.AuthorName </h3>
                                        <p class="card-text"> Bienvenue dans un coin enchanté de l'internet, où la magie de la nature rencontre les mélodies de l'imagination. Dans notre monde, les frontières entre le réel et l'irréel s'estompent doucement, laissant place à un espace où tout devient possible..</p>

                                        <p class="card-text text-center">
                                            <i class="bi bi-hand-thumbs-up-fill small">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-hand-thumbs-up-fill" viewBox="0 0 16 16">
                                                    <path d="M6.956 1.745C7.021.81 7.908.087 8.864.325l.261.066c.463.116.874.456 1.012.965.22.816.533 2.511.062 4.51a10 10 0 0 1 .443-.051c.713-.065 1.669-.072 2.516.21.518.173.994.681 1.2 1.273.184.532.16 1.162-.234 1.733q.086.18.138.363c.077.27.113.567.113.856s-.036.586-.113.856c-.039.135-.09.273-.16.404.169.387.107.819-.003 1.148a3.2 3.2 0 0 1-.488.901c.054.152.076.312.076.465 0 .305-.089.625-.253.912C13.1 15.522 12.437 16 11.5 16H8c-.605 0-1.07-.081-1.466-.218a4.8 4.8 0 0 1-.97-.484l-.048-.03c-.504-.307-.999-.609-2.068-.722C2.682 14.464 2 13.846 2 13V9c0-.85.685-1.432 1.357-1.615.849-.232 1.574-.787 2.132-1.41.56-.627.914-1.28 1.039-1.639.199-.575.356-1.539.428-2.59z" />
                                                </svg>
                                            </i>
                                            <i>@pub.LikesCount</i>
                                        </p>

                                    </div>

                                </div>
            }
                </div>
            </div>

    @if (DisplayAlert)
    {
                        <div class="alert alert-success fade-in" role="alert">
                            <p>@addCommentMsg</p>
                        </div>
    }


}


<a href="/editname"> <button class="btn btn-primary">Click here to change your username</button></a>
<button class="btn btn-primary" @onclick="DeleteUser">Click here to delete your account</button>


@code {
    @using Newtonsoft.Json.Linq;
    @inject IJSRuntime JSRuntime;
    @inject NavigationManager MyNavigationManager

    [Parameter]
    public bool DisplayAlert { get; set; }
    public List<PublicationModel> lstPublications = new List<PublicationModel>();
    public UserModel User = new UserModel() { Id = "", Name = ""};

    public string comment = "";
    public string addCommentMsg = "";

    protected override async Task OnInitializedAsync()
    {
        bool connected = Convert.ToBoolean(await JSRuntime.InvokeAsync<string>("BlazorGetLocalStore", "IsConnected"));

        if (!connected)
        {
            MyNavigationManager.NavigateTo("/");
        }

        string username = await JSRuntime.InvokeAsync<string>("BlazorGetLocalStore", "Username");
        string id = await JSRuntime.InvokeAsync<string>("BlazorGetLocalStore", "ID");
        User.Id = id;
        User.Name = username;

        await InitializePublications();
        StateHasChanged();
    }

    private async Task InitializePublications()
    {
        using var client = new HttpClient();
        var response = await client.GetStringAsync("http://localhost:3000/publications");
        JArray publications = JArray.Parse(response);
        foreach (dynamic obj in publications)
        {
            lstPublications.Add(new PublicationModel()
                {
                    Id = obj["_id"],
                    Title = obj["title"],
                    Author = obj["author"],
                    Image = obj["image"],
                    AuthorName = obj["authorName"],
                    // attribuer à la propriété LikesCount la taille du tableau de la liste des likes de la réponse
                    LikesCount = obj["likes"].Count

                });
        }
    }

    private async void DeleteUser()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");

        if (confirmed)
        {
            using var client = new HttpClient();
            string id = await JSRuntime.InvokeAsync<string>("BlazorGetLocalStore", "ID");
            var response = await client.DeleteAsync($"http://localhost:3000/users/delete/{id}");

            if (response.IsSuccessStatusCode)
            {
                var reader = new StreamReader(response.Content.ReadAsStream());
                var content = await reader.ReadToEndAsync();
                bool result = false;
                bool.TryParse(content, out result);
                if (result)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "User deleted");
                    await JSRuntime.InvokeVoidAsync("BlazorSetLocalStore", "Username", "");
                    await JSRuntime.InvokeVoidAsync("BlazorSetLocalStore", "ID", "");
                    await JSRuntime.InvokeVoidAsync("BlazorSetLocalStore", "IsConnected", "false");
                    MyNavigationManager.NavigateTo("/");
                }

            }



        }
    }
}

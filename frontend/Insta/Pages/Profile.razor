@page "/profile"
@* 
    Théo Neusser
    IDA-P4C
    Atelier Prog
    10.03.2024
 *@
<PageTitle>Profile</PageTitle>

<h2> You are connected as <span class="text-success">@User.Name</span></h2>

@if (lstPublications == null)
{
            <p><em>Loading...</em></p>
}
else
{
            <div class="container-fluid">
                <div class="row flex-row justify-content-between">
            @foreach (var pub in lstPublications)
            {
                    if (pub.AuthorName != User.Name)
                    {
                        continue;
                    }

                                <div class="card col-3 d-flex center customer-card">
                                    <img class="card-img-top" src="http://theo.api.cfpt.info/\@pub.Image" alt="@pub.Image">
                                    <div class="card-body d-flex flex-column justify-content-between">
                                        <h2 class="card-title"><a href="/publication?id=@pub.Id" class="text-decoration-none text-reset">@pub.Title</a></h2>
                                        <h3 class="card-title text-muted"> @pub.AuthorName </h3>
                                        

                                        

                                        <p class="card-text">@pub.Content</p>

                        <div>
                            <input type="text" @bind-value="updatedTitle">
                            <button class="btn btn-primary" @onclick="(() => { UpdateTitle(pub.Id);})">Edit publication title</button>
                        </div>
                        <button class="btn btn-primary" @onclick="(() => {DeletePublication(pub.Id);})">Delete publication</button>

                                        <p class="card-text text-center">
                                            <i class="bi bi-hand-thumbs-up-fill small">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-hand-thumbs-up-fill" viewBox="0 0 16 16">
                                                    <path d="M6.956 1.745C7.021.81 7.908.087 8.864.325l.261.066c.463.116.874.456 1.012.965.22.816.533 2.511.062 4.51a10 10 0 0 1 .443-.051c.713-.065 1.669-.072 2.516.21.518.173.994.681 1.2 1.273.184.532.16 1.162-.234 1.733q.086.18.138.363c.077.27.113.567.113.856s-.036.586-.113.856c-.039.135-.09.273-.16.404.169.387.107.819-.003 1.148a3.2 3.2 0 0 1-.488.901c.054.152.076.312.076.465 0 .305-.089.625-.253.912C13.1 15.522 12.437 16 11.5 16H8c-.605 0-1.07-.081-1.466-.218a4.8 4.8 0 0 1-.97-.484l-.048-.03c-.504-.307-.999-.609-2.068-.722C2.682 14.464 2 13.846 2 13V9c0-.85.685-1.432 1.357-1.615.849-.232 1.574-.787 2.132-1.41.56-.627.914-1.28 1.039-1.639.199-.575.356-1.539.428-2.59z" />
                                                </svg>
                                            </i>
                                            <i>@pub.LikesCount</i>
                                        </p>

                                    </div>

                                </div>
            }
                </div>
            </div>

    @if (DisplayAlert)
    {
                        <div class="alert alert-success fade-in" role="alert">
                            <p>@addCommentMsg</p>
                        </div>
    }


}


<a href="/editname"> <button class="btn btn-primary">Click here to change your username</button></a>
<button class="btn btn-primary" @onclick="DeleteUser">Click here to delete your account</button>


@code {
    @using Newtonsoft.Json.Linq;
    @using Newtonsoft.Json;
    @using System.Text;
    @inject IJSRuntime JSRuntime;
    @inject NavigationManager MyNavigationManager

    [Parameter]
    public bool DisplayAlert { get; set; }
    public List<PublicationModel> lstPublications = new List<PublicationModel>();
    public UserModel User = new UserModel();

    public string comment = "";
    public string addCommentMsg = "";

    private string updatedTitle = "";

    protected override async Task OnInitializedAsync()
    {
        // Check if user is connected, otherwise redirect to home page
        bool connected = Convert.ToBoolean(await JSRuntime.InvokeAsync<string>("BlazorGetLocalStore", "IsConnected"));

        if (!connected)
        {
            MyNavigationManager.NavigateTo("/");
        }

        await InitializePublications();
        StateHasChanged();
    }
    /// <summary>
    /// Initializes the publication (puts them in a list)
    /// </summary>
    /// <returns></returns>
    private async Task InitializePublications()
    {
        using var client = new HttpClient();
        using var request = new HttpRequestMessage(HttpMethod.Get, "http://theo.api.cfpt.info/login/username");
        string token = await JSRuntime.InvokeAsync<string>("BlazorGetLocalStore", "token");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var res = await client.SendAsync(request);
        if (res.IsSuccessStatusCode)
        {
            var reader = new StreamReader(res.Content.ReadAsStream());
            string username = await reader.ReadToEndAsync();
            User.Name = username;
        }
        else if (res.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            await JSRuntime.InvokeVoidAsync("BlazorRemoveLocalStore", "token");
            await JSRuntime.InvokeVoidAsync("BlazorSetLocalStore", "IsConnected", "false");
            MyNavigationManager.Refresh();

        }



        var response = await client.GetStringAsync("http://theo.api.cfpt.info/publications");
        JArray publications = JArray.Parse(response);
        foreach (dynamic obj in publications)
        {
            lstPublications.Add(new PublicationModel()
                {
                    Id = obj["_id"],
                    Title = obj["title"],
                    Author = obj["author"],
                    Image = obj["image"],
                    AuthorName = obj["authorName"],
                    Content = obj["content"],
                    // attribuer à la propriété LikesCount la taille du tableau de la liste des likes de la réponse
                    LikesCount = obj["likes"].Count

                });
        }
    }

    /// <summary>
    /// Deletes the connected user
    /// </summary>
    private async void DeleteUser()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");

        if (confirmed)
        {
            using var client = new HttpClient();
            using var request = new HttpRequestMessage(HttpMethod.Delete, "http://theo.api.cfpt.info/users/delete");
            string token = await JSRuntime.InvokeAsync<string>("BlazorGetLocalStore", "token");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "User deleted");
                await JSRuntime.InvokeVoidAsync("BlazorRemoveLocalStore", "token");
                await JSRuntime.InvokeVoidAsync("BlazorSetLocalStore", "IsConnected", "false");
                MyNavigationManager.Refresh();


            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await JSRuntime.InvokeVoidAsync("BlazorRemoveLocalStore", "token");
                await JSRuntime.InvokeVoidAsync("BlazorSetLocalStore", "IsConnected", "false");
                MyNavigationManager.Refresh();

            }



        }
    }

    /// <summary>
    /// Deletes a publication
    /// </summary>
    /// <param name="id">publication id</param>
    private async void DeletePublication(string id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");

        if (confirmed)
        {
            using var client = new HttpClient();
            using var request = new HttpRequestMessage(HttpMethod.Delete, $"http://theo.api.cfpt.info/publications/delete/{id}");
            string token = await JSRuntime.InvokeAsync<string>("BlazorGetLocalStore", "token");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Publication deleted");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await JSRuntime.InvokeVoidAsync("BlazorRemoveLocalStore", "token");
                await JSRuntime.InvokeVoidAsync("BlazorSetLocalStore", "IsConnected", "false");
                MyNavigationManager.Refresh();

            }



        }
    }

    /// <summary>
    /// Updates a publication's title
    /// </summary>
    /// <param name="id">publication id</param>
    private async void UpdateTitle(string id)
    {
        if (updatedTitle.Trim() == "")
        {
            await JSRuntime.InvokeVoidAsync("alert", "Title field empty! Please fill in the new title to update your post.");
            return;
        }
        using var client = new HttpClient();
        using var request = new HttpRequestMessage(HttpMethod.Patch, "http://theo.api.cfpt.info/publications/editTitle");

        var body = new
        {
            id = id,
            title = updatedTitle

        };

        string token = await JSRuntime.InvokeAsync<string>("BlazorGetLocalStore", "token");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        request.Content = new StringContent(JsonConvert.SerializeObject(body), Encoding.UTF8, "application/json");
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Post updated!");
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            await JSRuntime.InvokeVoidAsync("BlazorRemoveLocalStore", "token");
            await JSRuntime.InvokeVoidAsync("BlazorSetLocalStore", "IsConnected", "false");
            MyNavigationManager.Refresh();
        }

    }
}

@page "/editname"
@* 
    Théo Neusser
    IDA-P4C
    Atelier Prog
    10.03.2024
 *@
<PageTitle>Edit Name</PageTitle>

<h1>Edit your username</h1>
<h2></h2>

<div class="card">
    <div class="container">
        <EditForm Model="@editNameModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <h3>Username</h3>
            <InputText type="text" id="userName" @bind-Value="editNameModel.UserName" class="form-control"/>
            <br />
            <h3>New username</h3>
            <InputText type="text" id="newName" @bind-Value="editNameModel.NewName" class="form-control"/>
            <br />
            <h3>Password</h3>
            <InputText type="password" id="password" @bind-Value="editNameModel.Password" class="form-control" />
            <br />
            <br />
            <button type="submit" class="w-100 btn btn-lg btn-outline-primary">Submit</button>
            <ValidationSummary />
            <p style="color:red;">
                @error
            </p>

        </EditForm>
    </div>
</div>


@code {
    @inject NavigationManager MyNavigationManager
    @inject IJSRuntime JSRuntime;
    @using System.Net.Http;
    @using System.Net.Http.Json;
    @using System.Text;
    @using System.Web;
    @using Newtonsoft.Json.Linq;
    @using Newtonsoft.Json;
    // dotnet add JSRuntime

    private int currentCount = 0;

    public EditNameModel editNameModel = new();

    public string error = "";

    private dynamic? username;

    protected override async Task OnInitializedAsync()
    {
        bool connected = Convert.ToBoolean(await JSRuntime.InvokeAsync<string>("BlazorGetLocalStore", "IsConnected"));
        // redirects user to home page if not connected
        if (!connected)
        {
            MyNavigationManager.NavigateTo("/");
        }
        StateHasChanged();

    }

    private async void HandleValidSubmit()
    {
        using var client = new HttpClient();
        var response = await client.GetStringAsync("http://api.theo.cfpt.info/users");
        JArray users = JArray.Parse(response);

        foreach (dynamic user in users)
        {
            if (user["name"] == editNameModel.UserName && user["password"] == editNameModel.Password)
            {
                await CallEditName(editNameModel.NewName);
                
            }
            else
            {
                StateHasChanged();

            }

        }
    }

    /// <summary>
    /// Calls the API to change the user's name
    /// </summary>
    /// <param name="id">userId</param>
    /// <param name="username"></param>
    /// <returns></returns>
    private async Task CallEditName(string username)
    {
        using var client = new HttpClient();
        var body = new
        {
            username = username

        };
        var json = JsonConvert.SerializeObject(body);
        var data = new StringContent(json, Encoding.UTF8, "application/json");
        using var request = new HttpRequestMessage(HttpMethod.Patch, "http://api.theo.cfpt.info/users/update");
        string token = await JSRuntime.InvokeAsync<string>("BlazorGetLocalStore", "token");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        request.Content = data;
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            LoginModel loginModel = new LoginModel();
            loginModel.UserName = editNameModel.NewName;
            loginModel.Password = editNameModel.Password;
            var res = await client.PostAsJsonAsync("http://api.theo.cfpt.info/login", loginModel);
            if (res.IsSuccessStatusCode)
            {
                token = await res.Content.ReadAsStringAsync();
                // connect the user

                await JSRuntime.InvokeVoidAsync("BlazorSetLocalStore", "token", token);
            }
            MyNavigationManager.NavigateTo("/profile");
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            await JSRuntime.InvokeVoidAsync("BlazorRemoveLocalStore", "token");
            await JSRuntime.InvokeVoidAsync("BlazorSetLocalStore", "IsConnected", "false");
            MyNavigationManager.NavigateTo("/");
        }
        else
        {
            Console.WriteLine(response.StatusCode);
        }
    }
}

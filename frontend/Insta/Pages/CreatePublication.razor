@page "/createpub"
@* 
    Théo Neusser
    IDA-P4C
    Atelier Prog
    10.03.2024
 *@
<PageTitle>Create Publication</PageTitle>

<h1>Create a publication</h1>
<h2>Version 03.10.2024</h2>

<div class="card">
    <div class="container">
        <EditForm Model="@publicationModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <h3>Title</h3>
            <InputText type="text" id="title" @bind-Value="publicationModel.Title" class="form-control" />
            <br />
            <h3>Image</h3>
            <InputFile id="image" accept=".png,.jpg,.jpeg,.webp" OnChange="OnFileChangeAsync"></InputFile>
            <br />
            <br />
            <button type="submit" class="w-100 btn btn-lg btn-outline-primary">Create Publication</button>
            <ValidationSummary />
            <p style="color:green;">
                @success
            </p>
            <p style="color:red;">
                @error
            </p>

        </EditForm>
    </div>
</div>

<script type="text/javascript">
    function saveFile(fileName, base64)
    {
        const link = document.createElement('a');
        link.download = fileName;
        link.href = "data:application/octet-stream;base64," + base64;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>


@code {
    @inject NavigationManager MyNavigationManager
    @inject IJSRuntime JSRuntime;
    @using System.Net.Http;
    @using System.Net.Http.Json;
    @using System.Text;
    @using System.Security.Permissions;
    @using System.Security.Principal;
    @using System.Web;
    @using Newtonsoft.Json.Linq;
    @using Newtonsoft.Json;
    // dotnet add JSRuntime

    private int currentCount = 0;

    public PublicationModel publicationModel = new();

    private IBrowserFile _image = null;
    public string success = "";

    public string error = "";

    private bool _validImage = false;

    protected override async Task OnInitializedAsync()
    {
        bool connected = Convert.ToBoolean(await JSRuntime.InvokeAsync<string>("BlazorGetLocalStore", "IsConnected"));

        if (!connected)
        {
            MyNavigationManager.NavigateTo("/");
        }
        StateHasChanged();

    }

    private async void HandleValidSubmit()
    {
        if (!_validImage)
        {
            error = "Image is not valid.";
            return;
        }
        string id = await JSRuntime.InvokeAsync<string>("BlazorGetLocalStore", "ID");
        publicationModel.Author = id;
        publicationModel.Image = $"/{_image.Name}";
        byte[] buffer = await GetBuffer();
        string base64 = Convert.ToBase64String(buffer);
        PostPublication(base64);

    }

    private async Task OnFileChangeAsync(InputFileChangeEventArgs e)
    {
        var file = e.File;

        string[] validTypes = new string[3] { "image/png", "image/jpeg", "image/webp" };

        bool isImage = validTypes.Any(type => type == file.ContentType);

        if (!isImage)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please input a valid image. (Formats accepted: .png, .jpg/.jpeg, .webp)");
            _validImage = false;
            return;
        }
        _validImage = true;
        _image = e.File;
    }

    /// <summary>
    /// Gets the buffer out of the _image field
    /// </summary>
    /// <returns></returns>
    private async Task<byte[]> GetBuffer()
    {
        long maxBytesSize = 10_000_000; // 10 MB

        using (Stream stream = _image.OpenReadStream(maxBytesSize))
        {
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                return memoryStream.ToArray();
            }
        }

    }
    /// <summary>
    /// Calls the API to save the image back into the frontend
    /// </summary>
    /// <param name="fileName">name of the file</param>
    /// <param name="base64">content of the image encoded in base64</param>
    /// <returns></returns>
    private async Task PostPublication(string base64)
    {
        using var client = new HttpClient();
        var pub = new Publication() { Title = publicationModel.Title, Author = publicationModel.Author, Image = publicationModel.Image, Base64 = base64};
        var response = await client.PostAsJsonAsync("http://localhost:3000/publications/add", pub);
        if (response.IsSuccessStatusCode)
        {
            MyNavigationManager.NavigateTo("/profile");
        }
    }   

    /// <summary>
    /// Custom private class to parse into json
    /// </summary>
    private class Publication
    {
        [JsonProperty("title")]
        public string Title { get; set; }
        [JsonProperty("author")]
        public string Author { get; set; }
        [JsonProperty("image")]
        public string Image { get; set; }
        [JsonProperty("base64")]
        public string Base64 { get; set; }
    }
}
